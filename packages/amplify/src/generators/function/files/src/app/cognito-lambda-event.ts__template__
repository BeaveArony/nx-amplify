export type UserPoolLambdaPreSignUpTriggerSource =
  | 'PreSignUp_SignUp'
  | 'PreSignUp_AdminCreateUser';
export type UserPoolLambdaPostConfirmationTriggerSource =
  | 'PostConfirmation_ConfirmSignUp'
  | 'PostConfirmation_ConfirmForgotPassword';
export type UserPoolLambdaPreAuthenticationTriggerSource = 'PreAuthentication_Authentication';
export type UserPoolLambdaPostAuthenticationTriggerSource = 'PostAuthentication_Authentication';

export type UserPoolLambdaAuthenticationTriggerSource =
  | UserPoolLambdaPreSignUpTriggerSource
  | UserPoolLambdaPostConfirmationTriggerSource
  | UserPoolLambdaPreAuthenticationTriggerSource;
export type UserPoolLambdaChallengeTriggerSource =
  | 'DefineAuthChallenge_Authentication'
  | 'PreCreateAuthChallenge_AuthenticationSignUp_AdminCreateUser'
  | 'VerifyAuthChallengeResponse_Authentication';
export type UserPoolLambdaPreTokenGenerationTriggerSource =
  | 'TokenGeneration_HostedAuth'
  | 'TokenGeneration_Authentication'
  | 'TokenGeneration_NewPasswordChallenge'
  | 'TokenGeneration_AuthenticateDevice'
  | 'TokenGeneration_RefreshTokens';
export type UserPoolLambdaMigrateUserTriggerSource =
  | 'UserMigration_Authentication'
  | 'UserMigration_ForgotPassword';
export type UserPoolLambdaCustomMessageTriggerSource =
  | 'CustomMessage_SignUp'
  | 'CustomMessage_AdminCreateUser'
  | 'CustomMessage_ResendCode'
  | 'CustomMessage_ForgotPassword'
  | 'CustomMessage_UpdateUserAttribute'
  | 'CustomMessage_VerifyUserAttribute'
  | 'CustomMessage_Authentication';

export type UserPoolLambdaTriggerSources =
  | UserPoolLambdaAuthenticationTriggerSource
  | UserPoolLambdaChallengeTriggerSource
  | UserPoolLambdaPreTokenGenerationTriggerSource
  | UserPoolLambdaMigrateUserTriggerSource
  | UserPoolLambdaCustomMessageTriggerSource
  | UserPoolLambdaPostAuthenticationTriggerSource
  | CognitoMigrateUserTriggerEvent
  | 'PostAuthentication_Authentication'

export interface AuthChallengResult {
  challengeName:
    | 'CUSTOM_CHALLENGE'
    | 'SRP_A'
    | 'PASSWORD_VERIFIER'
    | 'SMS_MFA'
    | 'DEVICE_SRP_AUTH'
    | 'DEVICE_PASSWORD_VERIFIER'
    | 'ADMIN_NO_SRP_AUTH';
  challengeResult: boolean;
  challengeMetadata: string;
}

/**
 * User Pool Lambda Trigger Event
 * Amazon Cognito passes event information to your Lambda function which returns the same event object back to Amazon Cognito
 * with any changes in the response.
 *
 * This event shows the Lambda trigger common parameters:
 */
export interface CognitoCommonTriggerEvent<
  TTriggerSource extends UserPoolLambdaTriggerSources
> {
  version: string;
  triggerSource: TTriggerSource;
  region: string;
  userPoolId: string;
  userName: string;
  callerContext: {
    awsSdkVersion: string;
    clientId: string;
  };
  request: { userAttributes: Record<string, string> };
  response: Record<string, unknown>;
}

/**
 * Pre Sign-up Lambda Trigger Event
 *
 * The pre sign-up Lambda function is triggered just before Amazon Cognito signs up a new user.
 * It allows you to perform custom validation to accept or deny the registration request as part of the sign-up process.
 */
export interface CognitoPreSignupTriggerEvent
  extends CognitoCommonTriggerEvent<UserPoolLambdaPreSignUpTriggerSource> {
  request: {
    userAttributes: Record<string, string>;
    validationData?: Record<string, string>;
    clientMetadata?: Record<string, string>;
  };
  response: {
    autoConfirmUser: boolean;
    autoVerifyEmail: boolean;
    autoVerifyPhone: boolean;
  };
}

/**
 * Post Confirmation Lambda Trigger Event
 *
 * Amazon Cognito invokes this trigger after a new user is confirmed, allowing you to send custom messages or to add custom logic.
 * For example, you could use this trigger to gather new user data.
 * The request contains the current attributes for the confirmed user.
 */
export interface CognitoPostConfirmationTriggerEvent
  extends CognitoCommonTriggerEvent<UserPoolLambdaPostConfirmationTriggerSource> {
  request: {
    userAttributes: Record<string, string>;
    clientMetadata?: Record<string, string>;
  };
}

/**
 * Pre Authentication Lambda Trigger Event
 *
 * Amazon Cognito invokes this trigger when a user attempts to sign in,
 * allowing custom validation to accept or deny the authentication request.
 */
export interface CognitoPreAuthenticationTriggerEvent
  extends CognitoCommonTriggerEvent<UserPoolLambdaPreAuthenticationTriggerSource> {
  request: {
    userAttributes: Record<string, string>;
    validationData?: Record<string, string>;
    userNotFound: boolean;
  };
}

/**
 * Post Authentication Lambda Trigger Event
 *
 * Amazon Cognito invokes this trigger after signing in a user, allowing you to add custom logic after authentication.
 */
export interface CognitoPostAuthenticationTriggerEvent
  extends CognitoCommonTriggerEvent<UserPoolLambdaPostAuthenticationTriggerSource> {
  request: {
    userAttributes: Record<string, string>;
    newDeviceUsed: boolean;
    clientMetadata?: Record<string, string>;
  };
}

/**
 * Define Auth Challenge Lambda Trigger Event
 *
 * Amazon Cognito invokes this trigger to initiate the
 * {@link https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-authentication-flow.html#amazon-cognito-user-pools-custom-authentication-flow custom authentication flow}.
 *
 * This Lambda trigger is invoked to create a challenge to present to the user. The request for this Lambda trigger includes the
 * challengeName and session. The challengeName is a string and is the name of the next challenge to the user. The value of
 * this attribute is set in the Define Auth Challenge Lambda trigger.
 *
 * The challenge loop will repeat until all challenges are answered.
 */
export interface CognitoDefineAuthChallengeTriggerEvent
  extends CognitoCommonTriggerEvent<'DefineAuthChallenge_Authentication'> {
  request: {
    userAttributes: Record<string, string>;
    session: AuthChallengResult[];
    clientMetadata?: Record<string, string>;
    userNotFound: boolean;
  };
}

/**
 * Create Auth Challenge Lambda Trigger Event
 *
 * Amazon Cognito invokes this trigger after Define Auth Challenge
 * if a custom challenge has been specified as part of the Define Auth Challenge trigger.
 * It creates a {@link https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-authentication-flow.html#amazon-cognito-user-pools-custom-authentication-flow custom authentication flow}.
 *
 * This Lambda trigger is invoked to create a challenge to present to the user. The request for this Lambda trigger includes the
 * challengeName and session. The challengeName is a string and is the name of the next challenge to the user. The value of
 * this attribute is set in the Define Auth Challenge Lambda trigger.
 *
 * The challenge loop will repeat until all challenges are answered.
 */
export interface CognitoCreateAuthChallengeTriggerEvent
  extends CognitoCommonTriggerEvent<'PreCreateAuthChallenge_AuthenticationSignUp_AdminCreateUser'> {
  request: {
    userAttributes: Record<string, string>;
    challengeName: string;
    session: AuthChallengResult[];
    clientMetadata?: Record<string, string>;
    userNotFound: boolean;
  };
  response: {
    publicChallengeParameters: Record<string, string>;
    privateChallengeParameters: Record<string, string>;
    challengeMetadata: string;
  };
}

/**
 * Verify Auth Challenge Lambda Trigger Event
 *
 * Amazon Cognito invokes this trigger to verify if the response from the end user for a custom Auth Challenge is valid or not.
 * It is part of a user pool {@link https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-authentication-flow.html#amazon-cognito-user-pools-custom-authentication-flow custom authentication flow}.
 *
 * The request for this trigger contains the privateChallengeParameters and challengeAnswer parameters. The
 * privateChallengeParameters values are returned by the Create Auth Challenge Lambda trigger and will contain the
 * expected response from the user. The challengeAnswer parameter contains the user's response for the challenge.
 *
 * The response contains the answerCorrect attribute, which is set to true if the user successfully completed the challenge, or
 * false otherwise.
 *
 * The challenge loop will repeat until all challenges are answered.
 */
export interface CognitoVerifyAuthChallengeTriggerEvent
  extends CognitoCommonTriggerEvent<'VerifyAuthChallengeResponse_Authentication'> {
  request: {
    userAttributes: Record<string, string>;
    privateChallengeParameters: Record<string, string>;
    challengeAnswer: Record<string, string>;
    clientMetadata?: Record<string, string>;
    userNotFound: boolean;
  };
  response: { answerCorrect: boolean };
}

/**
 * Pre Token Generation Lambda Trigger Event
 *
 * Amazon Cognito invokes this trigger before token generation allowing you to customize identity token claims.
 * This Lambda trigger allows you to customize an identity token before it is generated.
 * You can use this trigger to add new claims, update claims, or suppress claims in the identity token.
 * To use this feature, you can associate a Lambda function from the Amazon Cognito user pools console
 * or by updating your user pool through the AWS CLI.
 * There are some claims which cannot be modified.
 * These include acr, amr, aud, auth_time, azp, exp, iat, identities, iss, sub, token_use, nonce, at_hash, and cognito:username.
 */
export interface CognitoPreTokenGenerationTriggerEvent
  extends CognitoCommonTriggerEvent<UserPoolLambdaPreTokenGenerationTriggerSource> {
  request: {
    userAttributes: Record<string, string>;
    groupConfiguration: {
      groupsToOverride: string[];
      iamRolesToOverride: string[];
      preferredRole: string;
    };
    clientMetadata?: Record<string, string>;
  };
  response: {
    claimsOverrideDetails: {
      claimsToAddOrOverride: Record<string, string>;
      claimsToSuppress: string[];
      groupOverrideDetails: {
        groupsToOverride: string[];
        iamRolesToOverride: string[];
        preferredRole: string;
      };
    };
  };
}

/**
 * Migrate User Lambda Trigger Event
 *
 * Amazon Cognito invokes this trigger when a user does not exist in the user pool at the time of sign-in with a password,
 * or in the forgot-password flow. After the Lambda function returns successfully, Amazon Cognito creates the user in the user pool.
 * For details on the authentication flow with the user migration Lambda trigger
 * see {@link https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-import-using-lambda.htmlImporting Users into User Pools With a User Migration Lambda Trigger}.
 *
 * You can migrate users from your existing user directory into Amazon Cognito user pools at the time of sign-in,
 * or during the forgot-password flow with this Lambda trigger.
 */
export interface CognitoMigrateUserTriggerEvent
  extends CognitoCommonTriggerEvent<CognitoMigrateUserTriggerEvent> {
  request: {
    password: string;
    userAttributes: Record<string, string>;
    validationData?: Record<string, string>;
    clientMetadata?: Record<string, string>;
  };
  response: {
    userAttributes: Record<string, string>;
    finalUserStatus: string;
    messageAction: string;
    desiredDeliveryMediums: string[];
    forceAliasCreation: boolean;
  };
}

/**
 * Custom Message Lambda Trigger Event
 *
 * Amazon Cognito invokes this trigger before sending an email or phone verification message or a multi-factor authentication
 * (MFA) code, allowing you to customize the message dynamically. Static custom messages can be edited in the __Message
 * Customizations__ tab of the Amazon Cognito console.
 *
 * The request includes codeParameter, which is a string that acts as a placeholder for the code that's being delivered to the user.
 * Insert the codeParameter string into the message body, at the position where you want the verification code to be inserted.
 * On receiving this response, the Amazon Cognito service replaces the codeParameter string with the actual verification code.
 */
export interface CognitoCustomMessageTriggerEvent
  extends CognitoCommonTriggerEvent<UserPoolLambdaCustomMessageTriggerSource> {
  request: {
    userAttributes: Record<string, string>;
    codeParameter: string;
    usernameParameter: string;
    /**
     * One or more key-value pairs that you can provide as custom input to the Lambda function that you specify for the
     * custom message trigger. You can pass this data to your Lambda function by using the ClientMetadata parameter in the following
     * API actions:
     * - {@link https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminResetUserPassword.html AdminResetUserPassword}
     * - {@link https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminRespondToAuthChallenge.html AdminRespondToAuthChallenge}
     * - {@link https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminUpdateUserAttributes.html AdminUpdateUserAttributes}
     * - {@link https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ForgotPassword.html ForgotPassword}
     * - {@link https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_GetUserAttributeVerificationCode.html GetUserAttributeVerificationCode}
     * - {@link https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ResendConfirmationCode.html ResendConfirmationCode}
     * - {@link https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SignUp.html SignUp}
     * - {@link https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UpdateUserAttributes.html UpdateUserAttributes}
     */
    clientMetadata?: Record<string, string>;
  };
  response: {
    smsMessage: string;
    emailMessage: string;
    emailSubject: string;
  };
}
